/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EntradaGUI.java
 *
 * Created on 27/05/2011, 15:13:50
 */
package br.com.sig.view;

import br.com.sig.dao.EntradaDAO;
import br.com.medicalpharm.model.EntradaItemModel;
import br.com.medicalpharm.model.EntradaModel;
import br.com.sig.util.ItemDbGrid;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

public class EntradaGUI extends javax.swing.JFrame {

    String permissao;

    public EntradaGUI() {
        initComponents();
        listarEntradas();
//        permissao = janelapai.permissao;
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            // UIManager.setLookAndFeel("com.sun.java.swing.plaf.smoothmetal.SmoothmetalLookAndAndFeel");
            //UIManager.setLookAndFeel("com.birosoft.liquid.LiquidLookAndFeel");
            //UIManager.setLookAndFeel(seta_look);
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception erro) {
            JOptionPane.showMessageDialog(null, erro);
        }
    }
    List<EntradaModel> entradas;
    List<EntradaItemModel> entradaItens;
    TelaPrincipal janelapai;

    public void setJanelaPai(TelaPrincipal janelapai) {

        janelapai = janelapai;
        permissao = janelapai.permissao;

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jrb_notaFiscal = new javax.swing.JRadioButton();
        jrb_detalhado = new javax.swing.JRadioButton();
        jrb_descricao = new javax.swing.JRadioButton();
        jl_pesquisar_destino = new javax.swing.JLabel();
        jb_buscar = new javax.swing.JButton();
        jtf_pesquisar = new javax.swing.JTextField();
        jb_sair = new javax.swing.JButton();
        jb_novo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gerenciamento de notas fiscais");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Consultas"));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroup1.add(jrb_notaFiscal);
        jrb_notaFiscal.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jrb_notaFiscal.setSelected(true);
        jrb_notaFiscal.setText("Nota Fiscal");
        jrb_notaFiscal.setName("jrb_notaFiscal"); // NOI18N
        jrb_notaFiscal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_notaFiscalActionPerformed(evt);
            }
        });
        jPanel1.add(jrb_notaFiscal, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 27, -1, -1));

        buttonGroup1.add(jrb_detalhado);
        jrb_detalhado.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jrb_detalhado.setText("Específica");
        jrb_detalhado.setName("jrb_detalhado"); // NOI18N
        jPanel1.add(jrb_detalhado, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, -1, -1));

        buttonGroup1.add(jrb_descricao);
        jrb_descricao.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jrb_descricao.setText("Descrição");
        jrb_descricao.setName("jrb_descricao"); // NOI18N
        jPanel1.add(jrb_descricao, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, -1, -1));

        jl_pesquisar_destino.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jl_pesquisar_destino.setText("Parâmetro");
        jl_pesquisar_destino.setName("jl_pesquisar_destino"); // NOI18N
        jPanel1.add(jl_pesquisar_destino, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 62, -1, -1));

        jb_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/medicalpharm/image/ok.png"))); // NOI18N
        jb_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_buscarActionPerformed1(evt);
            }
        });
        jPanel1.add(jb_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 60, -1, -1));

        jtf_pesquisar.setName("jtf_pesquisar"); // NOI18N
        jPanel1.add(jtf_pesquisar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 520, 20));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 688, 109));

        jb_sair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/medicalpharm/image/exit.png"))); // NOI18N
        jb_sair.setText("Sair");
        jb_sair.setName("jb_sair"); // NOI18N
        jb_sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_sairActionPerformed(evt);
            }
        });
        getContentPane().add(jb_sair, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, -1, 33));

        jb_novo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/medicalpharm/image/novo_registro.gif"))); // NOI18N
        jb_novo.setText("Novo");
        jb_novo.setName("jb_novo"); // NOI18N
        jb_novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_novoActionPerformed(evt);
            }
        });
        getContentPane().add(jb_novo, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, -1, -1));

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Preço", "Quantidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setName("jTable1"); // NOI18N
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(30);
        }

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 688, 150));

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jTable2.setUpdateSelectionOnSort(false);
        jTable2.setVerifyInputWhenFocusTarget(false);
        jTable2.setDefaultEditor(Object.class, null);
        jTable2.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e){
                if(e.getClickCount() == 1){
                    listarItem();
                }}});
                jTable2.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {
                        "Código", "Lançamento", "Fornecedor", "Nota Fiscal", "N° de Série", "Emissão"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false, false
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                jTable2.setName("jTable2"); // NOI18N
                jTable2.getTableHeader().setReorderingAllowed(false);
                jScrollPane3.setViewportView(jTable2);
                if (jTable2.getColumnModel().getColumnCount() > 0) {
                    jTable2.getColumnModel().getColumn(0).setPreferredWidth(20);
                    jTable2.getColumnModel().getColumn(1).setPreferredWidth(30);
                    jTable2.getColumnModel().getColumn(2).setPreferredWidth(100);
                    jTable2.getColumnModel().getColumn(3).setPreferredWidth(30);
                    jTable2.getColumnModel().getColumn(4).setPreferredWidth(30);
                    jTable2.getColumnModel().getColumn(5).setPreferredWidth(30);
                }

                getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 688, 166));

                setSize(new java.awt.Dimension(752, 568));
                setLocationRelativeTo(null);
            }// </editor-fold>//GEN-END:initComponents

    private void jb_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_buscarActionPerformed

        if (jrb_notaFiscal.isSelected() == true) {
            listarEntradaNotas();
        } else if (jrb_descricao.isSelected() == true) {
            listarEntradas();
        } else if (jrb_detalhado.isSelected() == true) {
            listarFornecedor();
        } else {
            listarEntradas();
        }
}//GEN-LAST:event_jb_buscarActionPerformed

    private void jb_novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_novoActionPerformed
        try {
            EntradaCadastraGUI entr = new EntradaCadastraGUI();
            entr.janelaPaim = this;
            entr.setVisible(true);
            this.setEnabled(false);
//            entr.setJanelapai(this);
        } catch (SQLException ex) {
            Logger.getLogger(EntradaGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

}//GEN-LAST:event_jb_novoActionPerformed

    private void jb_sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_sairActionPerformed
        setVisible(false);
//        janelapai.setVisible(true);
//        janelapai.setEnabled(true);
//                

      //  telaPrincipal.setStatusTela(true);
}//GEN-LAST:event_jb_sairActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        setVisible(false);
//        telaPrincipal.setStatusTela(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void jb_buscarActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_buscarActionPerformed1
        if (jrb_notaFiscal.isSelected()) {
            listarEntradaNotas();
        } else if (jrb_descricao.isSelected()) {
            listarEntradas();
        } else if (jrb_detalhado.isSelected()) {
            listarFornecedor();
        } else {
            listarEntradas();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_buscarActionPerformed1

    private void jrb_notaFiscalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrb_notaFiscalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jrb_notaFiscalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EntradaGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton jb_buscar;
    private javax.swing.JButton jb_novo;
    private javax.swing.JButton jb_sair;
    private javax.swing.JLabel jl_pesquisar_destino;
    private javax.swing.JRadioButton jrb_descricao;
    private javax.swing.JRadioButton jrb_detalhado;
    private javax.swing.JRadioButton jrb_notaFiscal;
    private javax.swing.JTextField jtf_pesquisar;
    // End of variables declaration//GEN-END:variables
    private TelaPrincipal_Interface telaPrincipal;//Recebendo tela como parametro para atualização apos pesquisa

    public void setTelaPrincipal(TelaPrincipal_Interface telaPrincipal) {
        this.telaPrincipal = telaPrincipal;
    }

    void request() {
        jtf_pesquisar.requestFocus();
    }

    public void listarEntradaNotas() {
        if (jtf_pesquisar.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Informe o código para procurar");
        } else {
            EntradaDAO controlEntrada = new EntradaDAO();
            Integer nota;
            nota = Integer.parseInt(jtf_pesquisar.getText());
            entradas = controlEntrada.listaEntradaNota(nota);
            mostrarNotas(entradas);
        }
    }

    public void listarFornecedor() {
        EntradaDAO controlEntrada = new EntradaDAO();
        entradas = controlEntrada.listarFornecedor(jtf_pesquisar.getText().trim() + "%");
        mostrarNotas(entradas);
    }

    public void listarEntradas() {
        EntradaDAO controlEntrada = new EntradaDAO();
        entradas = controlEntrada.listarDescricao("%" + jtf_pesquisar.getText().trim() + "%");
        mostrarNotas(entradas);

    }

    public void mostrarNotas(List<EntradaModel> entradas) {
        DefaultTableModel tableModel = (DefaultTableModel) jTable2.getModel();
        tableModel.setNumRows(0);

        if (entradas.size() == 0) {
            JOptionPane.showMessageDialog(this, "Nenhuma entrada encontrada");

        } else {


            for (int i = 0; i < entradas.size(); i++) {
                try {
                    EntradaModel entrada = new EntradaModel();
                    entrada.setIdEntrada(entradas.get(i).getIdEntrada());
                    entrada.setLancamento(entradas.get(i).getLancamento());
                    Date data;

                    SimpleDateFormat in = new SimpleDateFormat("yyyy-MM-dd");
                    SimpleDateFormat out = new SimpleDateFormat("dd/MM/yyyy");


                    String lancamento = out.format(in.parse(entradas.get(i).getLancamento().toString()));
                    String emissao = out.format(in.parse(entradas.get(i).getEmissao().toString()));

                    entrada.setFornecedor(entradas.get(i).getFornecedor());
                    entrada.setNotaFiscal(entradas.get(i).getNotaFiscal());
                    entrada.setnSérie(entradas.get(i).getnSérie());
                    entrada.setEmissao(entradas.get(i).getEmissao());


                    DefaultTableModel row = (DefaultTableModel) jTable2.getModel();
                    ItemDbGrid hashDbGrid = new ItemDbGrid(entrada, entrada.getFornecedor().getRazao_social());
                    row.addRow(new Object[]{entrada.getIdEntrada(), lancamento, hashDbGrid, entrada.getNotaFiscal(), entrada.getnSérie(), emissao});
                } catch (ParseException ex) {
                    Logger.getLogger(EntradaGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

    }

    public void listarItem() {
        EntradaModel entrada = tbNotaSelecionada(jTable2);
        if (entrada != null) {
            EntradaDAO controlEntrada = new EntradaDAO();
            Integer nota;
            nota = entrada.getIdEntrada();
            //controlEntrada.listarItens(entrada.getIdEntrada());
            entradaItens = controlEntrada.listarItens(nota);
            mostrarItens(entradaItens);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma nota");
            jtf_pesquisar.requestFocus();
        }
    }

    public EntradaModel tbNotaSelecionada(JTable tb) {
        EntradaModel entrada = null;
        if (tb.getSelectedRow() != -1) {
            entrada = new EntradaModel();
            entrada.setIdEntrada(entradas.get(tb.getSelectedRow()).getIdEntrada());
            
        }
        return entrada;

    }

    public void mostrarItens(List<EntradaItemModel> entradaItens) {
        ((DefaultTableModel) jTable1.getModel()).setRowCount(0);
        jTable1.updateUI();

        if (entradaItens.size() == 0) {
            JOptionPane.showMessageDialog(this, "Nenhum item encontrado");

        } else {

            String preço = null;

            for (int i = 0; i < entradaItens.size(); i++) {
                try {
                    //ou i<destino.size() para retornar todos
                    EntradaItemModel entradaItemModel = new EntradaItemModel();
                    entradaItemModel.setProduto(entradaItens.get(i).getProduto());
                  //  entradaItemModel.setLote(entradaItens.get(i).getLote());
                    entradaItemModel.setQnt(entradaItens.get(i).getQnt());
                    entradaItemModel.setPreco(entradaItens.get(i).getPreco());
                  //  entradaItemModel.setVencimento(entradaItens.get(i).getVencimento());

                    preço = String.valueOf(entradaItens.get(i).getPreco());
                    preço = setPrecoFormat(preço);



                    SimpleDateFormat in = new SimpleDateFormat("yyyy-MM-dd");
                    SimpleDateFormat out = new SimpleDateFormat("dd/MM/yyyy");


                    String vencimento = out.format(in.parse(entradaItens.get(i).getVencimento().toString()));


                    DefaultTableModel row = (DefaultTableModel) jTable1.getModel();
                    ItemDbGrid hashDbGrid = new ItemDbGrid(entradaItemModel, entradaItemModel.getProduto().getNome_produto());
                    row.addRow(new Object[]{hashDbGrid,
                                preço, entradaItemModel.getQnt()});
                } catch (ParseException ex) {
                    Logger.getLogger(EntradaGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            //   JOptionPane.showMessageDialog(null, preço);
        }

    }

    public void statusTela(boolean status) {
        if (status) {
            this.setVisible(status);
        }
        this.setEnabled(status);
    }

    public Double getPrecoFormato(String preco) {
        Double precoFormatado = 0.0;
        try {
            preco = preco.replace("R", "");
            preco = preco.replace("$", "");
            preco = preco.replace(",", ".");
            preco = preco.replace(" ", "");
            precoFormatado = Double.parseDouble(preco.trim());

            //this.objFuncionario.setSalario(getSalarioFormat(jTSalario.getText())); pegar valor em double

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Valor Informado Incorreto!\nInforme um valor com o seguinte formato:\nEx: 100,00");
        }
        return precoFormatado;
    }

    public String setPrecoFormat(String preco) {
        DecimalFormat dFormat = new DecimalFormat();
        dFormat.applyPattern("R$ #0.00");
        return dFormat.format(getPrecoFormato(preco));
    }
}
